import type { PrefabChild } from '../types/PrefabChild.js';
import { BinaryWriter } from '../BinaryWriter.js';
import { Prefab } from '../Prefab.js';
import { writeChildren } from './writeChildren.js';

describe('writeChildren()', () => {
  let prefabChildren: PrefabChild[];

  beforeEach(() => {
    prefabChildren = [
      { parentHash: 1337, prefab: new Prefab('Phantom_Guard') },
      { parentHash: 420, prefab: new Prefab('Phantom_Guard') },
      { parentHash: 69, prefab: new Prefab('Phantom_Guard') }
    ];
  });

  it('stores PrefabChildren in the given BinaryWriter', () => {
    const expectedData =


    const writer = new BinaryWriter();

    writeChildren(writer, prefabChildren, new Map());

    const data = writer.flush();

    expect(data).toStrictEqual(expectedData);
  });
});
